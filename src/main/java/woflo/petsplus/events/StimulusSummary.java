package woflo.petsplus.events;

import java.util.Collections;
import java.util.EnumMap;
import java.util.Map;

import woflo.petsplus.state.PetComponent;

/**
 * Compact summary of the net mood delta generated by an emotion stimulus that was
 * pushed onto a set of pets. Used so the cue system can decide whether a message
 * is meaningful enough to surface, merge into a digest, or suppress entirely.
 */
public final class StimulusSummary {

    private static final StimulusSummary EMPTY = new StimulusSummary(0f, 0f, 0, 0L,
        new EnumMap<>(PetComponent.Mood.class));

    private final float totalDelta;
    private final float maxSampleDelta;
    private final int petCount;
    private final long tick;
    private final EnumMap<PetComponent.Mood, Float> moodDeltas;

    private StimulusSummary(float totalDelta, float maxSampleDelta, int petCount, long tick,
                             EnumMap<PetComponent.Mood, Float> moodDeltas) {
        this.totalDelta = totalDelta;
        this.maxSampleDelta = maxSampleDelta;
        this.petCount = petCount;
        this.tick = tick;
        this.moodDeltas = moodDeltas;
    }

    public static StimulusSummary empty(long tick) {
        return tick == 0L ? EMPTY : new StimulusSummary(0f, 0f, 0, tick,
            new EnumMap<>(PetComponent.Mood.class));
    }

    public static Builder builder(long tick) {
        return new Builder(tick);
    }

    public float totalDelta() {
        return totalDelta;
    }

    public float maxSampleDelta() {
        return maxSampleDelta;
    }

    public int petCount() {
        return petCount;
    }

    public long tick() {
        return tick;
    }

    public boolean isEmpty() {
        return petCount <= 0 || totalDelta <= 0f;
    }

    public Map<PetComponent.Mood, Float> moodDeltas() {
        return Collections.unmodifiableMap(moodDeltas);
    }

    /**
     * Mutable helper for accumulating snapshots into a summary instance.
     */
    public static final class Builder {
        private final long tick;
        private final EnumMap<PetComponent.Mood, Float> deltas =
            new EnumMap<>(PetComponent.Mood.class);
        private float totalDelta;
        private float maxSampleDelta;
        private int petCount;

        private Builder(long tick) {
            this.tick = tick;
        }

        public void addSample(Map<PetComponent.Mood, Float> before,
                              Map<PetComponent.Mood, Float> after) {
            float sampleMagnitude = 0f;
            for (PetComponent.Mood mood : PetComponent.Mood.values()) {
                float beforeVal = before.getOrDefault(mood, 0f);
                float afterVal = after.getOrDefault(mood, 0f);
                float delta = afterVal - beforeVal;
                if (Math.abs(delta) < 1.0e-4f) {
                    continue;
                }
                deltas.merge(mood, delta, Float::sum);
                sampleMagnitude += Math.abs(delta);
            }
            if (sampleMagnitude > 0f) {
                totalDelta += sampleMagnitude;
                maxSampleDelta = Math.max(maxSampleDelta, sampleMagnitude);
            }
            petCount++;
        }

        public StimulusSummary build() {
            if (petCount <= 0) {
                return StimulusSummary.empty(tick);
            }
            return new StimulusSummary(totalDelta, maxSampleDelta, petCount, tick, deltas);
        }
    }
}

